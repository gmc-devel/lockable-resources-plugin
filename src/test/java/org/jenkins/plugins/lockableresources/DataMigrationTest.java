package org.jenkins.plugins.lockableresources;

import static org.hamcrest.Matchers.emptyIterable;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

import hudson.model.FreeStyleBuild;
import hudson.model.FreeStyleProject;
import java.util.Collections;
import org.jenkinsci.plugins.workflow.job.WorkflowJob;
import org.jenkinsci.plugins.workflow.job.WorkflowRun;
import org.junit.Rule;
import org.junit.Test;
import org.jvnet.hudson.test.JenkinsRule;
import org.jvnet.hudson.test.recipes.LocalData;

/**
 * Different data migration tests to make sure upgrades from older versions of this plugin still
 * work. Data for these tests should be generated by:
 *
 * <ol>
 *   <li>Checking out the older version of this plugin
 *   <li>Spinning up a test environment with
 *       <pre>mvn hpi:run</pre>
 *   <li>Create and reserve a locked resource
 *   <li>Create at least one freestyle and one pipeline job dependent on the locked resource
 *   <li>Start those jobs, so they are waiting for the resource
 *   <li>Shut down Jenkins and capture the relevant state
 * </ol>
 *
 * When first builing these tests, I had trouble with persisting Jenkins' queue, running <code>
 * Jenkins.instance.queue.save()</code> in the script console right before shutdown seems to do the
 * trick. (Probably related to JENKINS-34281)
 */
public class DataMigrationTest {

  @Rule public JenkinsRule j = new JenkinsRule();

  /**
   * The class {@link BackwardCompatibility} was introduced in 1.9, so we try to restore the state
   * of a running job of Jenkins with version 1.8 of this plugin.
   */
  @Test
  @LocalData
  @SuppressWarnings("deprecation")
  public void testFrom18Suspended() throws Exception {
    LockableResource res = LockableResourcesManager.get().fromName("resource1");
    assertThat(res.getQueuedContexts(), is(emptyIterable()));
    LockableResourcesManager.get().unreserve(Collections.singletonList(res));

    checkJobs();
  }

  /**
   * Basic compatibility check. If this breaks, we probably need a new data migration class and
   * <code>compatibleSinceVersion</code> needs to be adjusted.
   */
  @Test
  @LocalData
  public void testFrom20Suspended() throws Exception {
    LockableResource res = LockableResourcesManager.get().fromName("resource1");
    LockableResourcesManager.get().unreserve(Collections.singletonList(res));
    checkJobs();
  }

  private void checkJobs() throws Exception {
    j.waitUntilNoActivity();
    assertTrue("Jenkins queue should be empty", j.jenkins.getQueue().isEmpty());

    FreeStyleProject f = j.jenkins.getItemByFullName("f", FreeStyleProject.class);
    FreeStyleBuild b1 = f.getLastBuild();
    j.waitForCompletion(b1);

    WorkflowJob p = j.jenkins.getItemByFullName("p", WorkflowJob.class);
    WorkflowRun b2 = p.getLastBuild();
    j.waitForMessage("Finish", b2);
  }
}
